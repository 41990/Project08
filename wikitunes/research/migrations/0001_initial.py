# Generated by Django 5.1.4 on 2024-12-28 20:37

import django.db.models.deletion
import forums.models
import research.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('content', '0001_initial'),
        ('locations', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('sitereaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='content.sitereaction')),
                ('is_valid', models.BooleanField(default=True, help_text='Indicates if the object is valid.')),
                ('title', models.CharField(help_text='The headline of the article.', max_length=200)),
                ('slug', models.SlugField(help_text='A URL-friendly version of the headline.', max_length=200, unique=True)),
                ('content_path', models.FileField(help_text='The main content of the article.', upload_to='articles/content/')),
                ('published_date', models.DateTimeField(auto_now_add=True, help_text='When the article was published.')),
                ('featured_image', models.ImageField(blank=True, help_text='A main image for the article.', null=True, upload_to='articles/images/', validators=[research.models.validate_file_size])),
                ('excerpt', models.TextField(blank=True, help_text='Short summary of the article.', max_length=500, null=True)),
                ('views', models.IntegerField(default=0, help_text='Tracks how many times the article has been viewed.')),
                ('author', models.ForeignKey(help_text='The author of the article.', on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='accounts.account')),
                ('tags', models.ManyToManyField(blank=True, help_text='Keywords or tags for categorization.', related_name='articles', to='content.tag')),
            ],
            options={
                'abstract': False,
            },
            bases=('content.sitereaction', models.Model),
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('sitereaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='content.sitereaction')),
                ('is_valid', models.BooleanField(default=True, help_text='Indicates if the object is valid.')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('content_path', models.FileField(upload_to='blogs/content/')),
                ('published_date', models.DateTimeField(auto_now_add=True)),
                ('likes', models.IntegerField(default=0, help_text='Tracks the number of likes the blog has received.')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='blogs/images/', validators=[research.models.validate_file_size])),
                ('is_published', models.BooleanField(default=False, help_text='Indicates whether the blog is a draft or published.')),
                ('reading_time', models.IntegerField(help_text='Estimated reading time in minutes.')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blogs', to='accounts.account')),
                ('comments', models.ManyToManyField(blank=True, help_text='Allows users to comment on the blog post.', related_name='blogs', to='content.comment')),
                ('tags', models.ManyToManyField(blank=True, related_name='blogs', to='content.tag')),
            ],
            options={
                'abstract': False,
            },
            bases=('content.sitereaction', models.Model),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('sitereaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='content.sitereaction')),
                ('is_valid', models.BooleanField(default=True, help_text='Indicates if the object is valid.')),
                ('title', models.CharField(help_text='Title of the event.', max_length=100)),
                ('description', models.FileField(help_text='File describing the event content.', upload_to=forums.models.forum_data_desc_dir_path)),
                ('start_time', models.DateTimeField(help_text='Event start time.')),
                ('end_time', models.DateTimeField(help_text='Event end time.')),
                ('media', models.ForeignKey(blank=True, help_text='Media associated with the event.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='content.media')),
                ('owners', models.ManyToManyField(related_name='events', to='accounts.account')),
            ],
            options={
                'abstract': False,
            },
            bases=('content.sitereaction', models.Model),
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('search_term', models.CharField(help_text='The search term entered by the user.', max_length=255)),
                ('category', models.CharField(choices=[('general', 'General'), ('forum', 'Forum'), ('post', 'Post'), ('event', 'Event'), ('article', 'Article'), ('video', 'Video'), ('image', 'Image'), ('document', 'Document')], default='general', help_text='Category of the search.', max_length=20)),
                ('date', models.DateTimeField(auto_now_add=True, help_text='The date and time of the search.')),
                ('results_count', models.IntegerField(default=0, help_text='Number of results returned for the search.')),
                ('device_type', models.CharField(blank=True, help_text='Type of device used for the search.', max_length=50, null=True)),
                ('os', models.CharField(blank=True, help_text='Operating system of the device.', max_length=50, null=True)),
                ('browser', models.CharField(blank=True, help_text='Browser used for the search.', max_length=50, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address at the time of the search.', null=True)),
                ('search_duration', models.DurationField(blank=True, help_text='Time taken to complete the search.', null=True)),
                ('clicked_result', models.TextField(blank=True, help_text='Details of the result clicked by the user.', null=True)),
                ('search_engine', models.CharField(default='internal', help_text='Search engine or service used.', max_length=50)),
                ('referrer_url', models.URLField(blank=True, help_text='URL that referred the user to the search page.', null=True)),
                ('search_context', models.CharField(blank=True, help_text='Context or origin of the search.', max_length=255, null=True)),
                ('location', models.ForeignKey(blank=True, help_text='Location associated with the search event.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.location')),
                ('user', models.ForeignKey(help_text='The user who performed the search.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
