# Generated by Django 5.1.4 on 2024-12-28 20:37

import accounts.models
import content.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the tag.', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly version of the tag.', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the tag.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the tag was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of the last update to the tag.')),
                ('popularity', models.IntegerField(default=0, help_text='How many times this tag has been used.')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_valid', models.BooleanField(default=True, help_text='Indicates if the object is valid.')),
                ('title', models.CharField(help_text='Title of the post.', max_length=50)),
                ('description', models.FileField(help_text='File describing the post content.', upload_to=content.models.acc_data_desc_dir_path)),
                ('category', models.CharField(choices=[('CAT_0', 'Choose'), ('CAT_1', 'Category 1'), ('CAT_2', 'Category 2'), ('CAT_3', 'Category 3'), ('CAT_4', 'Category 4'), ('CAT_5', 'Category 5'), ('CAT_6', 'Category 6')], default='CAT_0', help_text='Post category.', max_length=10)),
                ('pub_date', models.DateTimeField(auto_now=True, help_text='Date when the post was published.')),
                ('current_date', models.DateField(auto_now=True, help_text='Last updated date.')),
                ('account', models.ForeignKey(help_text='Associated account for the post.', on_delete=django.db.models.deletion.CASCADE, to='accounts.account')),
                ('tags', models.ManyToManyField(related_name='posts', to='content.tag')),
            ],
            options={
                'ordering': ['-pub_date'],
            },
            bases=(models.Model, content.models.ReactionMixin),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_valid', models.BooleanField(default=True, help_text='Indicates if the object is valid.')),
                ('message', models.FileField(help_text='Content of the comment.', upload_to=content.models.user_comment_dir_path)),
                ('pub_date', models.DateTimeField(auto_now=True, help_text='Date when the comment was published.')),
                ('parent_comment', models.ForeignKey(blank=True, help_text='The parent comment, if this comment is a reply.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='content.comment')),
                ('user', models.ForeignKey(help_text='User who made the comment.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(blank=True, help_text='Associated post for the comment.', null=True, on_delete=django.db.models.deletion.CASCADE, to='content.post')),
                ('tags', models.ManyToManyField(related_name='comments', to='content.tag')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, content.models.ReactionMixin),
        ),
        migrations.CreateModel(
            name='SiteReaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.FileField(help_text='File containing message associated to reaction', upload_to=content.models.reactions_dir_path)),
                ('num_star', models.IntegerField(choices=[(1, 'Very bad post/comment'), (2, 'Bad post/comment'), (3, 'Good post/comment'), (4, 'Impressive post/comment'), (5, 'Outstanding post/comment')], default=1, help_text='Number of stars for reaction.')),
                ('comment', models.OneToOneField(help_text='Associated comment for the reaction.', on_delete=django.db.models.deletion.CASCADE, to='content.comment')),
                ('post', models.ForeignKey(help_text='Associated post for the reaction.', on_delete=django.db.models.deletion.CASCADE, to='content.post')),
                ('user', models.ForeignKey(help_text='User who makes the reaction', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_valid', models.BooleanField(default=True, help_text='Indicates if the object is valid.')),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('document', 'Document')], help_text='Type of media.', max_length=10)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='Upload timestamp.')),
                ('tags', models.ManyToManyField(related_name='media', to='content.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('media_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='content.media')),
                ('title', models.CharField(help_text='Title of the audio.', max_length=50)),
                ('upload', models.FileField(help_text='File containing uploaded audio.', upload_to=content.models.audio_dir_path, validators=[content.models.validate_file_size])),
                ('comment', models.ForeignKey(help_text='Associated comment for the audio.', null=True, on_delete=django.db.models.deletion.CASCADE, to='content.comment')),
                ('post', models.ForeignKey(help_text='Associated post for the audio.', null=True, on_delete=django.db.models.deletion.CASCADE, to='content.post')),
            ],
            options={
                'abstract': False,
            },
            bases=('content.media',),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('media_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='content.media')),
                ('title', models.CharField(help_text='Title of the text/document.', max_length=50)),
                ('upload', models.FileField(help_text='File containing uploaded text/document .', upload_to=accounts.models.text_dir_path)),
                ('comment', models.ForeignKey(help_text='Associated comment for the text/document.', null=True, on_delete=django.db.models.deletion.CASCADE, to='content.comment')),
                ('post', models.ForeignKey(help_text='Associated post for the text/document.', null=True, on_delete=django.db.models.deletion.CASCADE, to='content.post')),
            ],
            options={
                'abstract': False,
            },
            bases=('content.media',),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('media_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='content.media')),
                ('title', models.CharField(help_text='Title of the image.', max_length=50)),
                ('upload', models.ImageField(height_field='height', help_text='File containing uploaded image.', upload_to=accounts.models.img_dir_path, validators=[content.models.validate_file_size], width_field='width')),
                ('height', models.PositiveIntegerField(help_text='height of image in pixel/cm/mm.', null=True)),
                ('width', models.PositiveIntegerField(help_text='width of image in pixel/cm/mm.', null=True)),
                ('comment', models.ForeignKey(help_text='Associated comment for the image.', null=True, on_delete=django.db.models.deletion.CASCADE, to='content.comment')),
                ('post', models.ForeignKey(help_text='Associated post for the image.', null=True, on_delete=django.db.models.deletion.CASCADE, to='content.post')),
            ],
            options={
                'abstract': False,
            },
            bases=('content.media',),
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('media_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='content.media')),
                ('title', models.CharField(help_text='Title of the video.', max_length=50)),
                ('upload', models.FileField(help_text='File containing uploaded video.', upload_to=content.models.video_dir_path, validators=[content.models.validate_file_size])),
                ('comment', models.ForeignKey(help_text='Associated comment for the video.', null=True, on_delete=django.db.models.deletion.CASCADE, to='content.comment')),
                ('post', models.ForeignKey(help_text='Associated post for the video.', null=True, on_delete=django.db.models.deletion.CASCADE, to='content.post')),
            ],
            options={
                'abstract': False,
            },
            bases=('content.media',),
        ),
    ]
